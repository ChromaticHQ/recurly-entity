<?php

/**
 * Implements hook_menu().
 */
function recurly_entity_menu() {
  $items = [];
  $items['recurly/subscription/%recurly_subscription'] = [
    'page callback' => 'recurly_subscription_view',
    'page arguments' => [2],
    'access callback' => 'recurly_subscription_access',
    'access arguments' => [2],
    'type' => MENU_CALLBACK,
  ];

  $items['recurly/subscription-plan/%recurly_subscription_plan'] = [
    'page callback' => 'recurly_subscription_plan_view',
    'page arguments' => [2],
    'access arguments' => ['administer recurly'],
    'type' => MENU_CALLBACK,
  ];

  // Note that we don't currently support adding a completely new subscription
  // plan to Recurly. Instead, they must be created in Recurly, and then
  // imported into the site to manage any custom field data.
  $items['recurly/subscription-plan/add/%recurly_subscription_plan_code'] = [
    'page callback' => 'recurly_subscription_plan_add',
    'page arguments' => [3],
    'access arguments' => ['administer recurly'],
    'type' => MENU_CALLBACK,
    'file' => 'recurly_entity.admin.inc',
    'file path' => drupal_get_path('module', 'recurly_entity') .  '/includes',
  ];

  $items['recurly/adjustment/%recurly_adjustment'] = [
    'page callback' => 'recurly_adjustment_view',
    'page arguments' => [2],
    'access callback' => 'recurly_entity_adjustment_access',
    'access arguments' => [2],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function recurly_entity_menu_alter(&$items) {
  // We don't have a summary page, so pop out the manage fields listing to be
  // the default task.
  if (isset($items['admin/config/services/recurly/subscriptions/fields'])) {
    $items['admin/config/services/recurly/subscriptions'] = $items['admin/config/services/recurly/subscriptions/fields'];
    $items['admin/config/services/recurly/subscriptions']['title'] = 'Subscriptions';
    $items['admin/config/services/recurly/subscriptions/fields']['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
  if (isset($items['admin/config/services/recurly/adjustments/fields'])) {
    $items['admin/config/services/recurly/adjustments'] = $items['admin/config/services/recurly/adjustments/fields'];
    $items['admin/config/services/recurly/adjustments']['title'] = 'Adjustments';
    $items['admin/config/services/recurly/adjustments/fields']['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
}

/**
 * Implements hook_entity_info().
 */
function recurly_entity_entity_info() {
  return [
    'recurly_subscription' => [
      'label' => t('Subscription'),
      'plural label' => t('Subscriptions'),
      'entity class' => 'RecurlySubscription',
      'controller class' => 'RecurlySubscriptionController',
      'metadata controller class' => 'RecurlySubscriptionMetadataController',
      'extra fields controller class' => 'EntityDefaultExtraFieldsController',
      'base table' => 'recurly_subscription',
      'entity cache' => TRUE,
      'entity keys' => [
        'id' => 'id',
        'label' => 'title',
        'uuid' => 'uuid',
      ],
      // Use the default label() and uri() functions
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'bundles' => [
        'recurly_subscription' => [
          'label' => t('Subscription'),
          'admin' => [
            'path' => 'admin/config/services/recurly/subscriptions',
            'access arguments' => ['administer recurly'],
          ],
        ],
      ],
      'module' => 'recurly_entity',
      'view modes' => [
        'full' => [
          'label' => t('Full subscription'),
        ],
      ],
    ],
    'recurly_subscription_plan' => [
      'label' => t('Subscription Plan'),
      'plural label' => t('Subscription Plans'),
      'entity class' => 'RecurlySubscriptionPlan',
      'controller class' => 'RecurlySubscriptionPlanController',
      'metadata controller class' => 'RecurlySubscriptionPlanMetadataController',
      'extra fields controller class' => 'EntityDefaultExtraFieldsController',
      'base table' => 'recurly_subscription_plan',
      'entity cache' => TRUE,
      'entity keys' => [
        'id' => 'id',
        'label' => 'title',
      ],
      // Use the default label() and uri() functions
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'recurly_entity_subscription_plan_access',
      'fieldable' => TRUE,
      'bundles' => [
        'recurly_subscription_plan' => [
          'label' => t('Subscription plan'),
          'admin' => [
            'path' => 'admin/config/services/recurly/subscription-plans',
            'access arguments' => ['administer recurly'],
          ],
        ],
      ],
      'module' => 'recurly_entity',
      'admin ui' => [
        'path' => 'admin/content/recurly_subscription_plans',
        'file' => 'recurly_entity.admin.inc',
        'file path' => drupal_get_path('module', 'recurly_entity') .  '/includes',
        'controller class' => 'RecurlySubscriptionPlanUIController',
      ],
      'view modes' => [
        'full' => [
          'label' => t('Full subscription plan'),
        ],
        'recurly_data' => [
          'label' => t('Recurly data only'),
        ],
      ],
    ],
    'recurly_adjustment' => [
      'label' => t('Adjustment'),
      'plural label' => t('Adjustments'),
      'entity class' => 'RecurlyAdjustment',
      'controller class' => 'RecurlyAdjustmentController',
      'metadata controller class' => 'RecurlyAdjustmentMetadataController',
      'extra fields controller class' => 'EntityDefaultExtraFieldsController',
      'base table' => 'recurly_adjustment',
      'entity cache' => TRUE,
      'entity keys' => [
        'id' => 'id',
        'label' => 'title',
        'uuid' => 'uuid',
      ],
      // Use the default label() and uri() functions.
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'recurly_entity_adjustment_access',
      'fieldable' => TRUE,
      'bundles' => [
        'recurly_adjustment' => [
          'label' => t('Adjustment'),
          'admin' => [
            'path' => 'admin/config/services/recurly/adjustments',
            'access arguments' => ['administer recurly'],
          ],
        ],
      ],
      'module' => 'recurly_entity',
      'admin ui' => [
        'path' => 'admin/content/recurly-adjustment',
        'controller class' => 'RecurlyAdjustmentUIController',
      ],
      'view modes' => [
        'full' => [
          'label' => t('Full adjustment'),
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_flush_caches().
 */
function recurly_entity_flush_caches() {
  return [
    'cache_entity_recurly_subscription',
    'cache_entity_recurly_subscription_plan',
    'cache_entity_recurly_adjustment',
  ];
}

/**
 * Implements hook_permission().
 */
function recurly_entity_permission() {
  $permissions = [
    'administer recurly subscription plans' => [
      'title' => t('Administer Recurly subscription plans'),
      'description' => t('Allows users to manage imported Recurly subscription plans.'),
      'restrict access' => TRUE,
    ],
    'administer recurly adjustments' => [
      'title' => t('Administer Recurly adjustments'),
      'description' => t('Allows users to manage imported Recurly adjustments.'),
      'restrict access' => TRUE,
    ],
  ];

  return $permissions;
}

/**
 * Implements hook_help().
 */
function recurly_entity_help($path, $arg) {
  switch ($path) {
    case 'admin/content/recurly_subscription_plans':
      $output = '<p>' . t('Subscription plans must be imported from Recurly.com before they can be edited.') . '</p>';
      if (user_access('administer recurly')) {
        $settings_link = l(t('Recurly module settings'), 'admin/config/services/recurly/subscription-plans');
        $output .= '<p>' . t('Import subscription plans in the !settings_link.', ['!settings_link' => $settings_link]) . '</p>';
      }
      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function recurly_entity_cron() {
  if (variable_get('recurly_entity_adjustment_import', FALSE)) {
    module_load_include('inc', 'recurly_entity', 'includes/recurly_entity.import');
    recurly_entity_adjustment_queue();
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function recurly_entity_cron_queue_info() {
  $queues = [];

  // We allow our queue to be run even if Queue Runner is enabled. This ensures
  // that if any queued jobs are left over after the module was enabled, they
  // will still be processed by cron.
  $queues['recurly_entity_adjustment_import'] = [
    'worker callback' => 'recurly_entity_adjustment_import_callback',
    'time' => 10,
  ];

  return $queues;
}

/**
 * Implements hook_views_api().
 */
function recurly_entity_views_api() {
  return [
    'api' => 3,
    'path' => drupal_get_path('module', 'recurly_entity') . '/views',
  ];
}

/**
 * Implements hook_queue_runner_workers().
 */
function recurly_entity_queue_runner_workers() {
  return [
    'recurly_entity_adjustment_import' => [
      'callback' => 'recurly_entity_adjustment_import_callback',
    ],
  ];
}

/**
 * Callback for importing an adjustment.
 *
 * This is required as core's queue hooks don't allow for automatically loading
 * an include file.
 *
 * @param array $data
 *   An array of data to process. It must contain an 'adjustment' key with the
 *   Recurly_Adjustment object to import.
 */
function recurly_entity_adjustment_import_callback(array $data) {
  module_load_include('inc', 'recurly_entity', 'includes/recurly_entity.import');
  recurly_entity_adjustment_import($data['adjustment']);
}

/**
 * Access callback for Subscription Plans.
 */
function recurly_entity_subscription_plan_access($op, $subscription_plan = NULL, $account = NULL) {
  return user_access('administer recurly subscription plans', $account);
}

/**
 * Access callback for Adjustments.
 */
function recurly_entity_adjustment_access($op, $adjustment = NULL, $account = NULL) {
  return user_access('administer recurly adjustments', $account);
}

/**
 * Implements hook_theme().
 */
function recurly_entity_theme() {
  $info = [];
  $info['recurly_subscription_plan'] = [
    'render element' => 'elements',
    'path' => drupal_get_path('module', 'recurly_entity') . '/theme',
    'template' => 'recurly_subscription_plan',
  ];

  // Add in theme hooks for our entities and view modes.
  $entity_info = entity_get_info('recurly_subscription_plan');
  foreach (array_keys($entity_info['view modes']) as $view_mode) {
    $info['recurly_subscription_plan_' . $view_mode] = [
      'variables' => ['content' => NULL],
      'path' => drupal_get_path('module', 'recurly_entity') . '/theme',
      'template' => 'recurly_subscription_plan--' . $view_mode,
    ];
    $info['recurly_subscription_plan_' . $view_mode]['variables']['view_mode'] = $view_mode;
  }

  return $info;
}

/**
 * Implements hook_recurly_process_push_notification().
 */
function recurly_entity_recurly_process_push_notification($subdomain, Recurly_PushNotification $notification) {
  switch ($notification->type) {
    case 'expired_subscription_notification':
      $subscription = entity_get_controller('recurly_subscription')
        ->loadFromRecurly($notification->subscription->uuid);

      if ($subscription->state == 'expired') {
        $subscription->save();
      }
      break;
  }
}

/**
 * Load a single subscription entity.
 *
 * @param int $id
 *   The entity id of the subscription.
 *
 * @return RecurlySubscription
 *   The RecurlySubscription entity.
 */
function recurly_subscription_load($id) {
  return entity_load_single('recurly_subscription', $id);
}

/**
 * Load a single subscription plan entity.
 *
 * @param int $id
 *   The entity id of the subscription plan.
 *
 * @return RecurlySubscriptionPlan
 *   The RecurlySubscriptionPlan entity.
 */
function recurly_subscription_plan_load($id) {
  return entity_load_single('recurly_subscription_plan', $id);
}

/**
 * Load a single subscription plan from Recurly.
 *
 * @param string $plan_code
 *   The subscription plan code as defined in Recurly.
 *
 * @return RecurlySubscriptionPlan
 *   The RecurlySubscriptionPlan entity.
 */
function recurly_subscription_plan_code_load($plan_code) {
  return entity_get_controller('recurly_subscription_plan')->loadFromRecurly($plan_code);
}

/**
 * Load a single adjustment entity.
 *
 * @param int $id
 *   The entity id of the adjustment.
 *
 * @return RecurlyAdjustment
 *   The RecurlyAdjustment entity.
 */
function recurly_adjustment_load($id) {
  return entity_load_single('recurly_adjustment', $id);
}

/**
 * View a subscription plan.
 *
 * @param RecurlySubscriptionPlan $subscription_plan
 *
 * @return
 *   HTML representing the subscription plan.
 */
function recurly_subscription_plan_view(RecurlySubscriptionPlan $subscription_plan) {
  drupal_set_title($subscription_plan->label());
  return entity_view('recurly_subscription_plan', [$subscription_plan]);
}

/**
 * View an adjustment.
 *
 * @param RecurlyAdjustment $adjustment
 *   The adjustment to view.
 *
 * @return string
 *   HTML representing the subscription plan.
 */
function recurly_adjustment_view(RecurlyAdjustment $adjustment) {
  drupal_set_title($adjustment->label());
  return entity_view('recurly_adjustment', [$adjustment]);
}

/**
 * Getter callback for RecurlyEntity date properties.
 *
 * @param RecurlyEntity $data
 *   The entity to read from.
 * @param array $options
 *   Property options.
 * @param string $name
 *   The name of the given property.
 * @param string $type
 *   The entity type.
 * @param array $info
 *   Entity property info for the given property.
 *
 * @see gc_recurly_entity_property_info()
 */
function recurly_entity_property_date_get($data, array $options, $name, $type, $info) {
  if (!empty($data->{$name}->date)) {
    return strtotime($data->{$name}->date . ' ' . $data->{$name}->timezone);
  }

  return NULL;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alter the subscription plan listing form to allow importing of plans as local
 * Subscription Plan entities.
 */
function recurly_entity_form_recurly_subscription_plans_form_alter(&$form, &$form_state, $form_id) {
  foreach ($form['#plans'] as $plan_code => &$details) {
    // Make it clear that we are editing this plan off-site.
    if (isset($details['operations']['#links']['edit'])) {
      $details['operations']['#links']['edit']['title'] = t('edit at recurly');
    }

    // Add links to import or edit a local plan entity.
    $plan_entity = entity_get_controller('recurly_subscription_plan')->loadByPlanCode($plan_code);
    if (!$plan_entity || !isset($plan_entity->id)) {
      $details['operations']['#links']['import'] = [
        'title' => t('import subscription plan'),
        'href' => 'recurly/subscription-plan/add/' . $plan_code,
      ];
    }
    else {
      $details['operations']['#links']['edit_entity'] = [
        'title' => t('edit subscription fields'),
        'href' => 'admin/content/recurly_subscription_plans/manage/' . $plan_entity->id,
      ];
    }
  }
}

/**
 * Entity API callback to return the total for an adjustment.
 *
 * @param RecurlyAdjustment $adjustment
 *   The adjustment entity to return the total for.
 * @param array $options
 *   An array of options as passed in by Entity API.
 * @param string $name
 *   The name of the property being returned.
 *
 * @return int
 *   The total of the adjustment, in cents.
 */
function recurly_entity_adjustment_total_get(RecurlyAdjustment $adjustment, array $options, $name) {
  $total = $adjustment->quantity * $adjustment->unit_amount_in_cents;
  return $total;
}
